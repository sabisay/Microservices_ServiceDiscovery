import sqlite3
import socket

from flask import Flask, jsonify, request, render_template, redirect, url_for
from service_registery import register_service


app = Flask(__name__, template_folder='templates')

register_service("user-service", "user-service", 5001)

# VeritabanÄ± dosyasÄ±nÄ±n adÄ±
DATABASE = 'users.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db()
    c = conn.cursor()
    # Tabloyu oluÅŸtur (IF NOT EXISTS ile)
    c.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL)')
    # BaÅŸlangÄ±Ã§ kullanÄ±cÄ±larÄ±nÄ± ekle (varsa gÃ¶rmezden gel) - ID'yi otomatik artan yapalÄ±m
    try:
        # Var olup olmadÄ±ÄŸÄ±nÄ± kontrol etmeden eklemek yerine, belki de sadece ilk Ã§alÄ±ÅŸtÄ±rmada eklemek daha mantÄ±klÄ± olabilir.
        # Ama basitlik adÄ±na, mevcut kullanÄ±cÄ±lar yoksa ekleyelim.
        c.execute("SELECT COUNT(*) FROM users")
        if c.fetchone()['COUNT(*)'] == 0:
            print("Initializing database with default users...")
            conn.commit()
            print("Default users added.")
        else:
            print("Database already contains users.")
    except sqlite3.Error as e:
        print(f"Database error during init: {e}") # Hata olursa yazdÄ±r
    finally:
        conn.close()

# Uygulama baÅŸlamadan Ã¶nce veritabanÄ±nÄ± baÅŸlat
init_db()



# API endpoint: JSON olarak kullanÄ±cÄ± listesi dÃ¶ner
@app.route('/users')
def get_users_api():
    conn = get_db()
    c = conn.cursor()
    c.execute('SELECT id, name FROM users')
    # fetchall()'dan dÃ¶nen Row nesnelerini dict'e Ã§evir
    users = [dict(row) for row in c.fetchall()]
    conn.close()
    return jsonify(users)

# Ana sayfa: KullanÄ±cÄ±larÄ± listeleyen HTML sayfasÄ±nÄ± render eder
@app.route('/')
def home():
    conn = get_db()
    c = conn.cursor()
    c.execute('SELECT id, name FROM users')
    # fetchall()'dan dÃ¶nen Row nesnelerini doÄŸrudan ÅŸablona gÃ¶nderebiliriz (row_factory sayesinde)
    # ya da gÃ¼venli tarafta kalÄ±p dict'e Ã§evirebiliriz:
    users = [dict(row) for row in c.fetchall()]
    conn.close()
    # users deÄŸiÅŸkenini ÅŸablona gÃ¶nder
    return render_template('users.html', users=users)

# Yeni kullanÄ±cÄ± ekleme endpoint'i (POST metodu ile)
@app.route('/add_user', methods=['POST'])
def add_user():
    name = request.form.get('name') # form'dan 'name' alanÄ±nÄ± al
    if name: # Ä°sim boÅŸ deÄŸilse
        try:
            conn = get_db()
            c = conn.cursor()
            c.execute('INSERT INTO users (name) VALUES (?)', (name,))
            conn.commit()
        except sqlite3.Error as e:
            print(f"Error adding user: {e}") # Hata olursa yazdÄ±r
        finally:
            if conn:
                conn.close()
    # Ä°ÅŸlem bittikten sonra ana sayfaya yÃ¶nlendir
    return redirect(url_for('home'))

@app.route('/users/<int:user_id>')
def get_user_by_id(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute('SELECT id, name FROM users WHERE id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return jsonify(dict(row))
    else:
        return jsonify({'error': 'User not found'}), 404


# SaÄŸlÄ±k kontrolÃ¼ endpoint'i
@app.route('/health')
def health():
    return "OK", 200

if __name__ == '__main__':
    # 0.0.0.0: Konteyner dÄ±ÅŸÄ±ndan eriÅŸim iÃ§in
    # debug=True: GeliÅŸtirme sÄ±rasÄ±nda hatalarÄ± gÃ¶rmek iÃ§in (Ã¼retimde False olmalÄ±)
    # port=5001: User service'in Ã§alÄ±ÅŸacaÄŸÄ± port
    print("ğŸ”¥ This is the running user-service app.py")
    app.run(debug=True, host='0.0.0.0', port=5001, use_reloader=False)